#############################################################################
##  v      #                   The Coq Proof Assistant                     ##
## <O___,, #                INRIA - CNRS - LIX - LRI - PPS                 ##
##   \VV/  #                                                               ##
##    //   #  Makefile automagically generated by coq_makefile V8.5pl1     ##
#############################################################################

# WARNING
#
# This Makefile has been automagically generated
# Edit at your own risks !
#
# END OF WARNING

#
# This Makefile was generated by the command line :
# coq_makefile -f _CoqProject -o Makefile 
#

.DEFAULT_GOAL := all

# This Makefile may take arguments passed as environment variables:
# COQBIN to specify the directory where Coq binaries resides;
# TIMECMD set a command to log .v compilation time;
# TIMED if non empty, use the default time command as TIMECMD;
# ZDEBUG/COQDEBUG to specify debug flags for ocamlc&ocamlopt/coqc;
# DSTROOT to specify a prefix to install path.

# Here is a hack to make $(eval $(shell works:
define donewline


endef
includecmdwithout@ = $(eval $(subst @,$(donewline),$(shell { $(1) | tr -d '\r' | tr '\n' '@'; })))
$(call includecmdwithout@,$(COQBIN)coqtop -config)

TIMED=
TIMECMD=
STDTIME?=/usr/bin/time -f "$* (user: %U mem: %M ko)"
TIMER=$(if $(TIMED), $(STDTIME), $(TIMECMD))

vo_to_obj = $(addsuffix .o,\
  $(filter-out Warning: Error:,\
  $(shell $(COQBIN)coqtop -q -noinit -batch -quiet -print-mod-uid $(1))))

##########################
#                        #
# Libraries definitions. #
#                        #
##########################

COQLIBS?=\
  -R "src" Fiat
COQDOCLIBS?=\
  -R "src" Fiat

##########################
#                        #
# Variables definitions. #
#                        #
##########################


OPT?=
OTHERFLAGS=-compat 8.4 -require Coq.Compat.Coq84 -require Coq.Compat.AdmitAxiom
COQDEP?="$(COQBIN)coqdep" -c
COQFLAGS?=-q $(OPT) $(COQLIBS) $(OTHERFLAGS) $(COQ_XML)
COQCHKFLAGS?=-silent -o
COQDOCFLAGS?=-interpolate -utf8
COQC?=$(TIMER) "$(COQBIN)coqc"
GALLINA?="$(COQBIN)gallina"
COQDOC?="$(COQBIN)coqdoc"
COQCHK?="$(COQBIN)coqchk"
COQMKTOP?="$(COQBIN)coqmktop"

##################
#                #
# Install Paths. #
#                #
##################

ifdef USERINSTALL
XDG_DATA_HOME?="$(HOME)/.local/share"
COQLIBINSTALL=$(XDG_DATA_HOME)/coq
COQDOCINSTALL=$(XDG_DATA_HOME)/doc/coq
else
COQLIBINSTALL="${COQLIB}user-contrib"
COQDOCINSTALL="${DOCDIR}user-contrib"
COQTOPINSTALL="${COQLIB}toploop"
endif

######################
#                    #
# Files dispatching. #
#                    #
######################

VFILES:=src/ADT.v\
  src/ADT/ADTSig.v\
  src/ADT/ComputationalADT.v\
  src/ADT/Core.v\
  src/ADTNotation/BuildADT.v\
  src/ADTNotation/BuildADTReplaceMethods.v\
  src/ADTNotation/BuildADTSig.v\
  src/ADTNotation/BuildComputationalADT.v\
  src/ADTRefinement.v\
  src/ADTRefinement/BuildADTRefinements/HoneRepresentation.v\
  src/ADTRefinement/BuildADTSetoidMorphisms.v\
  src/ADTRefinement/Core.v\
  src/ADTRefinement/GeneralBuildADTRefinements.v\
  src/ADTRefinement/GeneralRefinements.v\
  src/ADTRefinement/Refinements.v\
  src/ADTRefinement/Refinements/DelegateMethods.v\
  src/ADTRefinement/Refinements/HoneRepresentation.v\
  src/ADTRefinement/Refinements/SimplifyRep.v\
  src/ADTRefinement/SetoidMorphisms.v\
  src/Common.v\
  src/Common/BoolFacts.v\
  src/Common/BoundedLookup.v\
  src/Common/Coq__8_4__8_5__Compat.v\
  src/Common/DecideableEnsembles.v\
  src/Common/Ensembles/EnsembleListEquivalence.v\
  src/Common/Enumerable.v\
  src/Common/Enumerable/BoolProp.v\
  src/Common/Enumerable/ReflectiveForall.v\
  src/Common/Enumerable/ReflectiveForallAggregate.v\
  src/Common/Equality.v\
  src/Common/FMapExtensions.v\
  src/Common/FMapExtensionsWf.v\
  src/Common/FixedPoints.v\
  src/Common/Gensym.v\
  src/Common/Instances.v\
  src/Common/IterateBoundedIndex.v\
  src/Common/Le.v\
  src/Common/List/FlattenList.v\
  src/Common/List/ListFacts.v\
  src/Common/List/ListMorphisms.v\
  src/Common/List/Operations.v\
  src/Common/List/PermutationFacts.v\
  src/Common/LogicFacts.v\
  src/Common/LogicMorphisms.v\
  src/Common/MSetBoundedLattice.v\
  src/Common/MSetExtensions.v\
  src/Common/Match.v\
  src/Common/NatFacts.v\
  src/Common/Notations.v\
  src/Common/OptionFacts.v\
  src/Common/SetEq.v\
  src/Common/SetEqProperties.v\
  src/Common/SetoidInstances.v\
  src/Common/Sigma.v\
  src/Common/StringBound.v\
  src/Common/StringFacts.v\
  src/Common/StringOperations.v\
  src/Common/Telescope/Core.v\
  src/Common/Telescope/Equality.v\
  src/Common/Telescope/Instances.v\
  src/Common/UIP.v\
  src/Common/VectorFacts.v\
  src/Common/Wf.v\
  src/Common/Wf1.v\
  src/Common/Wf2.v\
  src/Common/ilist.v\
  src/Common/ilist2.v\
  src/Computation.v\
  src/Computation/ApplyMonad.v\
  src/Computation/Core.v\
  src/Computation/Monad.v\
  src/Computation/Notations.v\
  src/Computation/Refinements/General.v\
  src/Computation/Refinements/Tactics.v\
  src/Computation/SetoidMorphisms.v\
  src/Parsers/BaseTypes.v\
  src/Parsers/BaseTypesLemmas.v\
  src/Parsers/BooleanRecognizer.v\
  src/Parsers/BooleanRecognizerCorrect.v\
  src/Parsers/BooleanRecognizerEquality.v\
  src/Parsers/BooleanRecognizerExt.v\
  src/Parsers/BooleanRecognizerOptimized.v\
  src/Parsers/BooleanRecognizerOptimizedReflective.v\
  src/Parsers/BooleanRecognizerOptimizedReflectiveCorrectness.v\
  src/Parsers/ContextFreeGrammar/Carriers.v\
  src/Parsers/ContextFreeGrammar/Core.v\
  src/Parsers/ContextFreeGrammar/Equality.v\
  src/Parsers/ContextFreeGrammar/Fix/AsciiLattice.v\
  src/Parsers/ContextFreeGrammar/Fix/Correct.v\
  src/Parsers/ContextFreeGrammar/Fix/Definitions.v\
  src/Parsers/ContextFreeGrammar/Fix/Fix.v\
  src/Parsers/ContextFreeGrammar/Fix/FromAbstractInterpretation.v\
  src/Parsers/ContextFreeGrammar/Fix/FromAbstractInterpretationDefinitions.v\
  src/Parsers/ContextFreeGrammar/Fix/Prod.v\
  src/Parsers/ContextFreeGrammar/Fix/ProdAbstractInterpretationDefinitions.v\
  src/Parsers/ContextFreeGrammar/Fix/Properties.v\
  src/Parsers/ContextFreeGrammar/Fold.v\
  src/Parsers/ContextFreeGrammar/Notations.v\
  src/Parsers/ContextFreeGrammar/PreNotations.v\
  src/Parsers/ContextFreeGrammar/Properties.v\
  src/Parsers/ContextFreeGrammar/Reflective.v\
  src/Parsers/ContextFreeGrammar/ReflectiveLemmas.v\
  src/Parsers/ContextFreeGrammar/SimpleCorrectness.v\
  src/Parsers/ContextFreeGrammar/SimpleCorrectnessMorphisms.v\
  src/Parsers/ContextFreeGrammar/SimpleTransfer.v\
  src/Parsers/ContextFreeGrammar/Transfer.v\
  src/Parsers/ContextFreeGrammar/TransferProperties.v\
  src/Parsers/ContextFreeGrammar/Valid.v\
  src/Parsers/ContextFreeGrammar/ValidProperties.v\
  src/Parsers/ContextFreeGrammar/ValidReflective.v\
  src/Parsers/CorrectnessBaseTypes.v\
  src/Parsers/ExtrOcamlParsers.v\
  src/Parsers/ExtrOcamlPrimitives.v\
  src/Parsers/GenericBaseTypes.v\
  src/Parsers/GenericBoolCorrectnessBaseTypes.v\
  src/Parsers/GenericCorrectnessBaseTypes.v\
  src/Parsers/GenericRecognizer.v\
  src/Parsers/GenericRecognizerBoolEquality.v\
  src/Parsers/GenericRecognizerCorrect.v\
  src/Parsers/GenericRecognizerEquality.v\
  src/Parsers/GenericRecognizerExt.v\
  src/Parsers/GenericRecognizerMin.v\
  src/Parsers/Grammars/ABStar.v\
  src/Parsers/Grammars/ExpressionNumPlusParen.v\
  src/Parsers/Grammars/JSONImpoverished.v\
  src/Parsers/Grammars/JavaScriptAssignmentExpression.v\
  src/Parsers/MinimalParse.v\
  src/Parsers/MinimalParseOfParse.v\
  src/Parsers/ParserADTSpecification.v\
  src/Parsers/ParserFromParserADT.v\
  src/Parsers/ParserImplementation.v\
  src/Parsers/ParserImplementationOptimized.v\
  src/Parsers/ParserInterface.v\
  src/Parsers/ParserInterfaceReflective.v\
  src/Parsers/Reachable/ParenBalanced/Core.v\
  src/Parsers/Reachable/ParenBalancedHiding/Core.v\
  src/Parsers/RecognizerPreOptimized.v\
  src/Parsers/Refinement/BinOpBrackets/BinOpRules.v\
  src/Parsers/Refinement/BinOpBrackets/MakeBinOpTable.v\
  src/Parsers/Refinement/BinOpBrackets/ParenBalanced.v\
  src/Parsers/Refinement/BinOpBrackets/ParenBalancedGrammar.v\
  src/Parsers/Refinement/BinOpBrackets/ParenBalancedLemmas.v\
  src/Parsers/Refinement/DisjointLemmas.v\
  src/Parsers/Refinement/DisjointRules.v\
  src/Parsers/Refinement/DisjointRulesRev.v\
  src/Parsers/Refinement/EmptyLemmas.v\
  src/Parsers/Refinement/FinishingLemma.v\
  src/Parsers/Refinement/FixedLengthLemmas.v\
  src/Parsers/Refinement/IndexedAndAtMostOneNonTerminalReflective.v\
  src/Parsers/Refinement/IndexedAndAtMostOneNonTerminalReflectiveOpt.v\
  src/Parsers/Refinement/PossibleTerminalsSets.v\
  src/Parsers/Refinement/PreTactics.v\
  src/Parsers/Refinement/ReductionTactics.v\
  src/Parsers/Refinement/SharpenedABStar.v\
  src/Parsers/Refinement/SharpenedExpressionPlusParen.v\
  src/Parsers/Refinement/SharpenedJSON.v\
  src/Parsers/Refinement/SharpenedJavaScriptAssignmentExpression.v\
  src/Parsers/Refinement/Tactics.v\
  src/Parsers/Reflective/LogicalRelations.v\
  src/Parsers/Reflective/Morphisms.v\
  src/Parsers/Reflective/ParserLogicalRelations.v\
  src/Parsers/Reflective/ParserPartialUnfold.v\
  src/Parsers/Reflective/ParserReify.v\
  src/Parsers/Reflective/ParserSemantics.v\
  src/Parsers/Reflective/ParserSemanticsOptimized.v\
  src/Parsers/Reflective/ParserSoundness.v\
  src/Parsers/Reflective/ParserSoundnessOptimized.v\
  src/Parsers/Reflective/ParserSyntax.v\
  src/Parsers/Reflective/ParserSyntaxEquivalence.v\
  src/Parsers/Reflective/PartialUnfold.v\
  src/Parsers/Reflective/Reify.v\
  src/Parsers/Reflective/Semantics.v\
  src/Parsers/Reflective/SemanticsOptimized.v\
  src/Parsers/Reflective/Syntactify.v\
  src/Parsers/Reflective/Syntax.v\
  src/Parsers/Reflective/SyntaxEquivalence.v\
  src/Parsers/SimpleBooleanRecognizerEquality.v\
  src/Parsers/SimpleRecognizer.v\
  src/Parsers/SimpleRecognizerCorrect.v\
  src/Parsers/SimpleRecognizerExt.v\
  src/Parsers/SplitterFromParserADT.v\
  src/Parsers/Splitters/BruteForce.v\
  src/Parsers/Splitters/RDPList.v\
  src/Parsers/StringLike/Core.v\
  src/Parsers/StringLike/FirstChar.v\
  src/Parsers/StringLike/FirstCharSuchThat.v\
  src/Parsers/StringLike/ForallChars.v\
  src/Parsers/StringLike/LastChar.v\
  src/Parsers/StringLike/LastCharSuchThat.v\
  src/Parsers/StringLike/OcamlString.v\
  src/Parsers/StringLike/Properties.v\
  src/Parsers/StringLike/String.v\
  src/Parsers/WellFoundedParse.v\
  src/Parsers/WellFoundedParseProperties.v

ifneq ($(filter-out archclean clean cleanall printenv,$(MAKECMDGOALS)),)
-include $(addsuffix .d,$(VFILES))
else
ifeq ($(MAKECMDGOALS),)
-include $(addsuffix .d,$(VFILES))
endif
endif

.SECONDARY: $(addsuffix .d,$(VFILES))

VO=vo
VOFILES:=$(VFILES:.v=.$(VO))
VOFILES1=$(patsubst src/%,%,$(filter src/%,$(VOFILES)))
GLOBFILES:=$(VFILES:.v=.glob)
GFILES:=$(VFILES:.v=.g)
HTMLFILES:=$(VFILES:.v=.html)
GHTMLFILES:=$(VFILES:.v=.g.html)
OBJFILES=$(call vo_to_obj,$(VOFILES))
ALLNATIVEFILES=$(OBJFILES:.o=.cmi) $(OBJFILES:.o=.cmo) $(OBJFILES:.o=.cmx) $(OBJFILES:.o=.cmxs)
NATIVEFILES=$(foreach f, $(ALLNATIVEFILES), $(wildcard $f))
NATIVEFILES1=$(patsubst src/%,%,$(filter src/%,$(NATIVEFILES)))
ifeq '$(HASNATDYNLINK)' 'true'
HASNATDYNLINK_OR_EMPTY := yes
else
HASNATDYNLINK_OR_EMPTY :=
endif

#######################################
#                                     #
# Definition of the toplevel targets. #
#                                     #
#######################################

all: $(VOFILES) 

quick: $(VOFILES:.vo=.vio)

vio2vo:
	$(COQC) $(COQDEBUG) $(COQFLAGS) -schedule-vio2vo $(J) $(VOFILES:%.vo=%.vio)
checkproofs:
	$(COQC) $(COQDEBUG) $(COQFLAGS) -schedule-vio-checking $(J) $(VOFILES:%.vo=%.vio)
gallina: $(GFILES)

html: $(GLOBFILES) $(VFILES)
	- mkdir -p html
	$(COQDOC) -toc $(COQDOCFLAGS) -html $(COQDOCLIBS) -d html $(VFILES)

gallinahtml: $(GLOBFILES) $(VFILES)
	- mkdir -p html
	$(COQDOC) -toc $(COQDOCFLAGS) -html -g $(COQDOCLIBS) -d html $(VFILES)

all.ps: $(VFILES)
	$(COQDOC) -toc $(COQDOCFLAGS) -ps $(COQDOCLIBS) -o $@ `$(COQDEP) -sort -suffix .v $^`

all-gal.ps: $(VFILES)
	$(COQDOC) -toc $(COQDOCFLAGS) -ps -g $(COQDOCLIBS) -o $@ `$(COQDEP) -sort -suffix .v $^`

all.pdf: $(VFILES)
	$(COQDOC) -toc $(COQDOCFLAGS) -pdf $(COQDOCLIBS) -o $@ `$(COQDEP) -sort -suffix .v $^`

all-gal.pdf: $(VFILES)
	$(COQDOC) -toc $(COQDOCFLAGS) -pdf -g $(COQDOCLIBS) -o $@ `$(COQDEP) -sort -suffix .v $^`

validate: $(VOFILES)
	$(COQCHK) $(COQCHKFLAGS) $(COQLIBS) $(notdir $(^:.vo=))

beautify: $(VFILES:=.beautified)
	for file in $^; do mv $${file%.beautified} $${file%beautified}old && mv $${file} $${file%.beautified}; done
	@echo 'Do not do "make clean" until you are sure that everything went well!'
	@echo 'If there were a problem, execute "for file in $$(find . -name \*.v.old -print); do mv $${file} $${file%.old}; done" in your shell/'

.PHONY: all archclean beautify byte clean cleanall gallina gallinahtml html install install-doc install-natdynlink install-toploop opt printenv quick uninstall userinstall validate vio2vo

####################
#                  #
# Special targets. #
#                  #
####################

byte:
	$(MAKE) all "OPT:=-byte"

opt:
	$(MAKE) all "OPT:=-opt"

userinstall:
	+$(MAKE) USERINSTALL=true install

install:
	cd "src" && for i in $(NATIVEFILES1) $(GLOBFILES1) $(VFILES1) $(VOFILES1); do \
	 install -d "`dirname "$(DSTROOT)"$(COQLIBINSTALL)/Fiat/$$i`"; \
	 install -m 0644 $$i "$(DSTROOT)"$(COQLIBINSTALL)/Fiat/$$i; \
	done

install-doc:
	install -d "$(DSTROOT)"$(COQDOCINSTALL)/Fiat/html
	for i in html/*; do \
	 install -m 0644 $$i "$(DSTROOT)"$(COQDOCINSTALL)/Fiat/$$i;\
	done

uninstall_me.sh: Makefile
	echo '#!/bin/sh' > $@
	printf 'cd "$${DSTROOT}"$(COQLIBINSTALL)/Fiat && rm -f $(NATIVEFILES1) $(GLOBFILES1) $(VFILES1) $(VOFILES1) && find . -type d -and -empty -delete\ncd "$${DSTROOT}"$(COQLIBINSTALL) && find "Fiat" -maxdepth 0 -and -empty -exec rmdir -p \{\} \;\n' >> "$@"
	printf 'cd "$${DSTROOT}"$(COQDOCINSTALL)/Fiat \\\n' >> "$@"
	printf '&& rm -f $(shell find "html" -maxdepth 1 -and -type f -print)\n' >> "$@"
	printf 'cd "$${DSTROOT}"$(COQDOCINSTALL) && find Fiat/html -maxdepth 0 -and -empty -exec rmdir -p \{\} \;\n' >> "$@"
	chmod +x $@

uninstall: uninstall_me.sh
	sh $<

.merlin:
	@echo 'FLG -rectypes' > .merlin
	@echo "B $(COQLIB) kernel" >> .merlin
	@echo "B $(COQLIB) lib" >> .merlin
	@echo "B $(COQLIB) library" >> .merlin
	@echo "B $(COQLIB) parsing" >> .merlin
	@echo "B $(COQLIB) pretyping" >> .merlin
	@echo "B $(COQLIB) interp" >> .merlin
	@echo "B $(COQLIB) printing" >> .merlin
	@echo "B $(COQLIB) intf" >> .merlin
	@echo "B $(COQLIB) proofs" >> .merlin
	@echo "B $(COQLIB) tactics" >> .merlin
	@echo "B $(COQLIB) tools" >> .merlin
	@echo "B $(COQLIB) toplevel" >> .merlin
	@echo "B $(COQLIB) stm" >> .merlin
	@echo "B $(COQLIB) grammar" >> .merlin
	@echo "B $(COQLIB) config" >> .merlin

clean::
	rm -f $(OBJFILES) $(OBJFILES:.o=.native) $(NATIVEFILES)
	find . -name .coq-native -type d -empty -delete
	rm -f $(VOFILES) $(VOFILES:.vo=.vio) $(GFILES) $(VFILES:.v=.v.d) $(VFILES:=.beautified) $(VFILES:=.old)
	rm -f all.ps all-gal.ps all.pdf all-gal.pdf all.glob $(VFILES:.v=.glob) $(VFILES:.v=.tex) $(VFILES:.v=.g.tex) all-mli.tex
	- rm -rf html mlihtml uninstall_me.sh

cleanall:: clean
	rm -f $(patsubst %.v,.%.aux,$(VFILES))

archclean::
	rm -f *.cmx *.o

printenv:
	@"$(COQBIN)coqtop" -config
	@echo 'CAMLC =	$(CAMLC)'
	@echo 'CAMLOPTC =	$(CAMLOPTC)'
	@echo 'PP =	$(PP)'
	@echo 'COQFLAGS =	$(COQFLAGS)'
	@echo 'COQLIBINSTALL =	$(COQLIBINSTALL)'
	@echo 'COQDOCINSTALL =	$(COQDOCINSTALL)'

Makefile: _CoqProject
	mv -f $@ $@.bak
	"$(COQBIN)coq_makefile" -f $< -o $@


###################
#                 #
# Implicit rules. #
#                 #
###################

$(VOFILES): %.vo: %.v
	$(COQC) $(COQDEBUG) $(COQFLAGS) $*

$(GLOBFILES): %.glob: %.v
	$(COQC) $(COQDEBUG) $(COQFLAGS) $*

$(VFILES:.v=.vio): %.vio: %.v
	$(COQC) -quick $(COQDEBUG) $(COQFLAGS) $*

$(GFILES): %.g: %.v
	$(GALLINA) $<

$(VFILES:.v=.tex): %.tex: %.v
	$(COQDOC) $(COQDOCFLAGS) -latex $< -o $@

$(HTMLFILES): %.html: %.v %.glob
	$(COQDOC) $(COQDOCFLAGS) -html $< -o $@

$(VFILES:.v=.g.tex): %.g.tex: %.v
	$(COQDOC) $(COQDOCFLAGS) -latex -g $< -o $@

$(GHTMLFILES): %.g.html: %.v %.glob
	$(COQDOC) $(COQDOCFLAGS)  -html -g $< -o $@

$(addsuffix .d,$(VFILES)): %.v.d: %.v
	$(COQDEP) $(COQLIBS) "$<" > "$@" || ( RV=$$?; rm -f "$@"; exit $${RV} )

$(addsuffix .beautified,$(VFILES)): %.v.beautified:
	$(COQC) $(COQDEBUG) $(COQFLAGS) -beautify $*

# WARNING
#
# This Makefile has been automagically generated
# Edit at your own risks !
#
# END OF WARNING

